

Event loop:
Consider a button, if you click multiple times faster it inject to a call stack and executes one by one without blocking new clicks.


Event prioty:
console.log('Start');

setTimeout(() => {
  console.log('Timeout');
}, 0);

Promise.resolve().then(() => {
  console.log('Promise');
});

console.log('End');

Start
End
Promise
Timeout

How would you optimize the performance of a web application?
* less HTTP calls
* Image optimize
* Code splitting (lazy loading)
* Caching
* Bundle size reduction
* Debounce or throttle user input events.


slice(): creates a new array with a portion of elements copied from the original array
splice(): changes the original array itself by removing, replacing or adding elements to it.

Immediately Invoked Function: IIFEs are commonly used to create private scope in JavaScript.

Deepclone:
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}

For of vs for in:
let list = [4, 5, 6];

for (let i in list) {
   console.log(i); // "0", "1", "2", //Usefull for objects
}

for (let i of list) {
   console.log(i); // "4", "5", "6"
}


Debouncing vs Throttling: Key Differences
Execution Frequency: Debouncing postpones the execution until after a period of inactivity, 
while throttling limits the execution to a fixed number of times over an interval.

Use Cases: Debouncing is ideal for tasks that donâ€™t need to execute repeatedly in quick succession, 
such as API calls based on user input. 
Throttling is suited for controlling the execution rate of functions called in response to events like scrolling or resizing.
//// refer debounce.js file